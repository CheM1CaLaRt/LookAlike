import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType
from aiogram.filters import CommandStart
from aiogram import F
import asyncio
import json
import pprint

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7352605219:AAFZyO9u6Ren-oI1vn8w_KGlZg3JzxvA5iU"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ—ë.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    await message.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")  # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    file = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    response = requests.get(file_url)
    image_bytes = response.content

    # –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ API
    api_url = "https://starmatch-ai.p.rapidapi.com/fetch_celebrities"
    headers = {
        "x-rapidapi-key": "9f01634ab6msh8678df376b20c2ap1876edjsn997e60a027b9",
        "x-rapidapi-host": "starmatch-ai.p.rapidapi.com",
    }

    files = {
        'file': ('photo.jpg', image_bytes, 'image/jpeg')
    }

    api_response = requests.post(api_url, headers=headers, files=files)

    if api_response.status_code == 200:
        data = api_response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(data, list) or len(data) == 0:
            await message.answer("–Ø –Ω–µ –Ω–∞—à—ë–ª –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π –Ω–∞ —Ñ–æ—Ç–æ üò¢")
            return

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏
        for celeb in data:
            name = celeb.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            similarity = float(celeb.get("similarity", 0))
            image_url = celeb.get("image_url")
            wiki_url = celeb.get("wiki_url")

            caption = f"‚≠ê {name}\n–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {similarity:.2f}%"
            if wiki_url:
                caption += f"\nüìö [Wiki]({wiki_url})"

            if image_url:
                await message.answer_photo(photo=image_url, caption=caption, parse_mode="Markdown")
            else:
                await message.answer(caption)

    else:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {api_response.status_code}\n{api_response.text}")



async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

